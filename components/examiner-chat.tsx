"use client"

/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/RVyfoRWbged
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { useState, useEffect, useRef } from 'react';

// Let's assume you have a list of questions
const questions = [
  "What is the capital city of France?",
  "Who wrote 'To Kill a Mockingbird'?",
  "What is the largest mammal in the world?",
  // Add more questions as needed
];

// Define a custom component for the Typing indicator
const TypingIndicator = () => {
  const [text, setText] = useState('Typing.');
  useEffect(() => {
    const dotCount = text.split('.').length; // Count the current number of dots
    const interval = setInterval(() => {
      // Cycle through different states based on the current text
      setText(dotCount < 4 ? `Typing${'.'.repeat(dotCount)}` : 'Typing.');
    }, 500); // Update every 500 milliseconds

    return () => clearInterval(interval); // Clean up interval on component unmount
  }, [text]);

  return <p>{text}</p>;
};

export function ExaminerChat() {
  const [input, setInput] = useState('');
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [messages, setMessages] = useState([{ sender: 'AI', text: questions[0] }]);
  const [isTyping, setIsTyping] = useState(false);
  const endOfMessagesRef = useRef<HTMLDivElement>(null);

  const isFirstQuestion = currentQuestionIndex === 0;
  const isLastQuestion = currentQuestionIndex === questions.length - 1;
  const questionNumber = currentQuestionIndex + 1; // Since array index is 0-based

  useEffect(() => {
    // Load messages for the current question from localStorage
    const savedMessages = sessionStorage.getItem(`messages_question_${currentQuestionIndex}`);
    if (savedMessages) {
      setMessages(JSON.parse(savedMessages));
    } else {
      // Start with the AI's initial message if no saved messages are found
      setMessages([{ sender: 'AI', text: questions[currentQuestionIndex] }]);
    }
  }, [currentQuestionIndex]);

  useEffect(() => {
    // Save messages to localStorage whenever they change
    sessionStorage.setItem(`messages_question_${currentQuestionIndex}`, JSON.stringify(messages));
  }, [messages, currentQuestionIndex]);

  useEffect(() => {
    // Scroll to the last message
    endOfMessagesRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleInputChange = (e: any) => {
    setInput(e.target.value);
  };

  const handleSendMessage = () => {
    if (input.trim() && !isTyping) {
      setMessages([...messages, { sender: 'User', text: input }]);
      setIsTyping(true);
      setInput('');

      // Simulate AI response time
      setTimeout(() => {
        setMessages((prevMessages) => [...prevMessages, { sender: 'AI', text: "Here's the AI's response!" }]);
        setIsTyping(false);
      }, 2000); // 2 seconds delay
    }
  };

  const goToNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setMessages([{ sender: 'AI', text: questions[currentQuestionIndex + 1] }]);
    }
  };

  const goToPreviousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
      setMessages([{ sender: 'AI', text: questions[currentQuestionIndex - 1] }]);
    }
  };

  const handleSubmit = () => {
    // Handle the submission logic here
    console.log('Submitting answers...');
  };

  const horizontalPadding = "px-6";

  // Add your AI's initial message here.
  // const aiInitialMessage = "Hello! Let's start with a simple question. What is the capital city of France?";


  return (
    <div className="flex h-screen w-full flex-col bg-white">
      {/* Header section */}
      <div className={`${horizontalPadding} pt-6 pb-4 bg-white shadow`}>
        <h2 className="text-2xl font-semibold">Study Spark AI</h2>
        <h3 className="text-xl font-semibold mt-4">Question {questionNumber}</h3> {/* Use the questionNumber variable here */}
      </div>

      {/* Chat messages section */}
      <div className="flex-1 p-6 overflow-auto bg-gray-100">
        {messages.map((message, index) => (
          <div key={index} className={`flex flex-row items-start gap-2 mb-4`}>
            {message.sender === 'AI' ? (
              <div className="rounded-full bg-black h-8 w-8 flex items-center justify-center text-white">
                AI
              </div>
            ) : (
              <img
                src="/user_profile_icon.png"
                alt="User"
                className="rounded-full h-8 w-8" // This makes the image rounded
              />
            )}
            <div className="flex flex-col">
              <span className="font-semibold">{message.sender === 'AI' ? 'AI Assistant' : 'You'}</span>
              <div className={`bg-white rounded-lg p-2`}>
                <p>{message.text}</p>
              </div>
            </div>
          </div>
        ))}
        {isTyping && (
          <div className="flex flex-row items-start gap-2 mb-4">
            <div className="rounded-full bg-black h-8 w-8 flex items-center justify-center text-white">AI</div>
            <div className="flex flex-col">
              <span className="font-semibold">AI Assistant</span>
              <div className="bg-white rounded-lg p-2">
                <TypingIndicator /> {/* Use TypingIndicator component here */}
              </div>
            </div>
          </div>
        )}
        <div ref={endOfMessagesRef} />
      </div>

      {/* Input and send button section */}
      <div className={`bg-gray-100 shadow-inner`}>
        <div className={`${horizontalPadding} py-4 flex items-center`}>
          <Input
            className={`flex-1 ${isTyping ? 'bg-gray-300' : 'bg-white'}`}
            placeholder="Type your answer here..."
            value={input}
            onChange={handleInputChange}
            onKeyPress={(e: any) => e.key === 'Enter' && handleSendMessage()}
            disabled={isTyping} // Disable the input field when AI is typing
          />
          <Button 
            className={`ml-4 bg-black text-white hover:bg-white hover:text-black border border-black ${isTyping ? 'opacity-50 cursor-not-allowed' : ''}`}
            onClick={handleSendMessage}
            disabled={isTyping} // Disable the button when AI is typing
          >
            Send
          </Button>
        </div>
      </div>
      {/* Navigation buttons section */}
      <div className={`${horizontalPadding} py-4 bg-white shadow`}>
        <div className="flex justify-between">
          <Button 
            className={`hover:bg-white hover:text-black border border-black ${isFirstQuestion ? 'bg-gray-300 text-gray-600 cursor-not-allowed' : 'bg-black text-white'}`}
            onClick={goToPreviousQuestion}
            disabled={isFirstQuestion}
          >
            Previous
          </Button>
          {isLastQuestion ? (
            <Button 
              className="hover:bg-white hover:text-black border border-black bg-black text-white" 
              onClick={handleSubmit}
            >
              Submit
            </Button>
          ) : (
            <Button 
              className="hover:bg-white hover:text-black border border-black bg-black text-white" 
              onClick={goToNextQuestion}
            >
              Next
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}